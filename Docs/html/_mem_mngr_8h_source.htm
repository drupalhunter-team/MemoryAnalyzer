<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>MemoryAnalyzer: MemMngr.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>MemMngr.h</h1>  </div>
</div>
<div class="contents">
<a href="_mem_mngr_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00005"></a>00005 <span class="preprocessor">#ifndef MEMMNGR_H</span>
<a name="l00006"></a>00006 <span class="preprocessor"></span><span class="preprocessor">#define MEMMNGR_H</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;exception&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
<a name="l00014"></a>00014 
<a name="l00015"></a>00015 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span><span class="preprocessor">#include &lt;malloc.h&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#endif</span>
<a name="l00018"></a>00018 <span class="preprocessor"></span>
<a name="l00019"></a>00019 
<a name="l00023"></a><a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">00023</a> <span class="keyword">enum</span> <a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a>
<a name="l00024"></a>00024 {
<a name="l00025"></a><a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9da94e85418a4b3a8ee7e7312c48232eb62">00025</a>         ALLOC_NEW,                      
<a name="l00026"></a><a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9da5539728868ff142a38119a3590a086de">00026</a>         <a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9da5539728868ff142a38119a3590a086de">ALLOC_NEW_ARRAY</a>         
<a name="l00027"></a>00027 };
<a name="l00028"></a>00028 
<a name="l00036"></a><a class="code" href="class_memory_manager.htm">00036</a> <span class="keyword">class </span><a class="code" href="class_memory_manager.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryManager</a>
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038 <span class="keyword">private</span>:
<a name="l00039"></a>00039 
<a name="l00043"></a>00043         <span class="keyword">struct </span>AllocationHeader
<a name="l00044"></a>00044         {
<a name="l00046"></a>00046                 <span class="keywordtype">size_t</span> rawSize;
<a name="l00047"></a>00047                 <a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type;
<a name="l00048"></a>00048         };
<a name="l00049"></a>00049 
<a name="l00053"></a>00053         <span class="keyword">struct </span>AddrListNode
<a name="l00054"></a>00054         {
<a name="l00056"></a>00056                 <span class="keywordtype">void</span> *address;
<a name="l00058"></a>00058                 <span class="keyword">const</span> <span class="keywordtype">char</span> *file;
<a name="l00060"></a>00060                 <span class="keywordtype">int</span> line;
<a name="l00061"></a>00061                 AddrListNode *next;
<a name="l00062"></a>00062         };
<a name="l00063"></a>00063 
<a name="l00067"></a>00067         <span class="keyword">struct </span>MemInfoNode
<a name="l00068"></a>00068         {
<a name="l00070"></a>00070                 <span class="keywordtype">size_t</span> size;
<a name="l00072"></a>00072                 <span class="keywordtype">int</span> numberOfAllocations;
<a name="l00074"></a>00074                 AddrListNode *addresses;
<a name="l00075"></a>00075                 MemInfoNode *next;
<a name="l00076"></a>00076         };
<a name="l00077"></a>00077 
<a name="l00079"></a>00079         MemInfoNode *head_new;
<a name="l00081"></a>00081         MemInfoNode *head_new_array;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083         <span class="keywordtype">size_t</span> currentMemory;
<a name="l00084"></a>00084         <span class="keywordtype">size_t</span> peakMemory;
<a name="l00085"></a>00085         
<a name="l00086"></a>00086         <span class="keyword">const</span> <span class="keywordtype">char</span> *filenameUnavail;
<a name="l00087"></a>00087         
<a name="l00088"></a>00088         std::ofstream dumpFile;
<a name="l00089"></a>00089 
<a name="l00090"></a>00090         <a class="code" href="class_memory_manager.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryManager</a>();
<a name="l00091"></a>00091         ~<a class="code" href="class_memory_manager.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryManager</a>();
<a name="l00092"></a>00092 
<a name="l00100"></a>00100         <span class="keywordtype">void</span> AddAllocationToList(<span class="keywordtype">size_t</span> size, <a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type, <span class="keywordtype">void</span> *ptr, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line);
<a name="l00101"></a>00101 
<a name="l00110"></a>00110         <span class="keywordtype">void</span>* Allocate(<span class="keywordtype">size_t</span> size, <a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, <span class="keywordtype">bool</span> throwEx = <span class="keyword">false</span>);
<a name="l00111"></a>00111         
<a name="l00117"></a>00117         <span class="keywordtype">void</span> Deallocate(<span class="keywordtype">void</span> *ptr, <a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type, <span class="keywordtype">bool</span> throwEx = <span class="keyword">false</span>);
<a name="l00118"></a>00118         
<a name="l00123"></a>00123         <span class="keyword">const</span> <span class="keywordtype">char</span>* GetAllocTypeAsString(<a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type);
<a name="l00124"></a>00124         
<a name="l00129"></a>00129         MemInfoNode* GetListHead(<a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type);
<a name="l00130"></a>00130 
<a name="l00135"></a>00135         <span class="keywordtype">void</span> RemoveAllocationFromList(<span class="keywordtype">void</span> *ptr, <a class="code" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type);
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 <span class="keyword">public</span>:
<a name="l00138"></a>00138 
<a name="l00142"></a><a class="code" href="class_memory_manager.htm#af9e3dca6fda527c206ef11247252b26d">00142</a>         <span class="keywordtype">bool</span> <a class="code" href="class_memory_manager.htm#af9e3dca6fda527c206ef11247252b26d">showAllAllocs</a>;
<a name="l00146"></a><a class="code" href="class_memory_manager.htm#a5a9aee63ce0e72991a2934a4be42013c">00146</a>         <span class="keywordtype">bool</span> <a class="code" href="class_memory_manager.htm#a5a9aee63ce0e72991a2934a4be42013c">showAllDeallocs</a>;
<a name="l00149"></a><a class="code" href="class_memory_manager.htm#aeec6e1092439f4a867beebfb758fc877">00149</a>         <span class="keywordtype">bool</span> <a class="code" href="class_memory_manager.htm#aeec6e1092439f4a867beebfb758fc877">dumpLeaksToFile</a>;
<a name="l00150"></a>00150         
<a name="l00154"></a>00154         <span class="keyword">static</span> <a class="code" href="class_memory_manager.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryManager</a>&amp; <a class="code" href="class_memory_manager.htm#a09acb527f6c46ff400f5d6291c9d9f40" title="Singleton access.">Get</a>();
<a name="l00155"></a>00155         
<a name="l00164"></a>00164         <span class="keywordtype">void</span> <a class="code" href="class_memory_manager.htm#a49260bf700379ade0b77b08b6d5e4103" title="Displays current memory allocations in the console according to criteria.">DisplayAllocations</a>(<span class="keywordtype">bool</span> displayNumberOfAllocsFirst = <span class="keyword">true</span>, <span class="keywordtype">bool</span> displayDetail = <span class="keyword">false</span>);
<a name="l00165"></a>00165         
<a name="l00169"></a>00169         <span class="keywordtype">size_t</span> <a class="code" href="class_memory_manager.htm#ae79df692477f9e1f91cdcebc007e0f90" title="Retrieves the current allocated memory.">GetCurrentMemory</a>();
<a name="l00170"></a>00170         
<a name="l00174"></a>00174         <span class="keywordtype">size_t</span> <a class="code" href="class_memory_manager.htm#a23ccadfa46fd511dbb529bd98838ef40" title="Retrieves the peak allocated memory.">GetPeakMemory</a>();
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00177"></a>00177 <span class="preprocessor"></span>
<a name="l00180"></a>00180         <span class="keywordtype">void</span> <a class="code" href="class_memory_manager.htm#a529a47ef874fbd9cb373a5341aa5956d" title="Calls Windows-specific function to check the state of the heap and display a message in the console i...">HeapCheck</a>();
<a name="l00181"></a>00181 <span class="preprocessor">#endif</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>
<a name="l00183"></a>00183         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_manager.htm#a205ed048fdf5259c2e8e0cb60ee8f719" title="Overloaded form of new (exception form).">operator new</a>(<span class="keywordtype">size_t</span> size);
<a name="l00184"></a>00184         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_manager.htm#a205ed048fdf5259c2e8e0cb60ee8f719" title="Overloaded form of new (exception form).">operator new</a>(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00185"></a>00185         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_manager.htm#a205ed048fdf5259c2e8e0cb60ee8f719" title="Overloaded form of new (exception form).">operator new</a>(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line);
<a name="l00186"></a>00186         <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="class_memory_manager.htm#a3d97a7e2a0208075b4b37328c96ed390" title="Overloaded form of delete (exception form).">operator delete</a>(<span class="keywordtype">void</span> *ptr);
<a name="l00187"></a>00187         <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="class_memory_manager.htm#a3d97a7e2a0208075b4b37328c96ed390" title="Overloaded form of delete (exception form).">operator delete</a>(<span class="keywordtype">void</span> *ptr, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00188"></a>00188 
<a name="l00189"></a>00189         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_manager.htm#a63ce4f64887b9307317aee5baae6b18f" title="Overloaded form of array new (exception form).">operator new[]</a>(<span class="keywordtype">size_t</span> size);
<a name="l00190"></a>00190         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_manager.htm#a63ce4f64887b9307317aee5baae6b18f" title="Overloaded form of array new (exception form).">operator new[]</a>(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00191"></a>00191         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_manager.htm#a63ce4f64887b9307317aee5baae6b18f" title="Overloaded form of array new (exception form).">operator new[]</a>(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line);
<a name="l00192"></a>00192         <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="class_memory_manager.htm#a1d8b2d6f17242ae0d182b0f7a98ba54f" title="Overloaded form of array delete (exception form).">operator delete[]</a>(<span class="keywordtype">void</span> *ptr);
<a name="l00193"></a>00193         <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="class_memory_manager.htm#a1d8b2d6f17242ae0d182b0f7a98ba54f" title="Overloaded form of array delete (exception form).">operator delete[]</a>(<span class="keywordtype">void</span> *ptr, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00194"></a>00194 };
<a name="l00195"></a>00195 
<a name="l00197"></a>00197 <span class="keywordtype">void</span>* operator new(<span class="keywordtype">size_t</span> size);
<a name="l00199"></a>00199 <span class="keywordtype">void</span>* operator new(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00201"></a>00201 <span class="keywordtype">void</span>* operator new(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line);
<a name="l00203"></a>00203 <span class="keywordtype">void</span> operator delete(<span class="keywordtype">void</span> *ptr);
<a name="l00205"></a>00205 <span class="keywordtype">void</span> operator delete(<span class="keywordtype">void</span> *ptr, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00206"></a>00206 
<a name="l00208"></a>00208 <span class="keywordtype">void</span>* operator new[](<span class="keywordtype">size_t</span> size);
<a name="l00210"></a>00210 <span class="keywordtype">void</span>* operator new[](<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00212"></a>00212 <span class="keywordtype">void</span>* operator new[](<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line);
<a name="l00214"></a>00214 <span class="keywordtype">void</span> operator delete[](<span class="keywordtype">void</span> *ptr);
<a name="l00216"></a>00216 <span class="keywordtype">void</span> operator delete[](<span class="keywordtype">void</span> *ptr, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00217"></a>00217 
<a name="l00218"></a>00218 
<a name="l00219"></a>00219 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Sat Nov 6 2010 22:42:56 for MemoryAnalyzer by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
