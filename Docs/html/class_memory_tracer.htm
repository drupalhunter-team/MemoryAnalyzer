<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>MemoryAnalyzer: MemoryTracer Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<h1>MemoryTracer Class Reference</h1>  </div>
</div>
<div class="contents">
<!-- doxytag: class="MemoryTracer" -->
<p>Internal implementation of the MemoryAnalyzer tool.  
<a href="#_details">More...</a></p>

<p><code>#include &lt;<a class="el" href="_memory_tracer_8h_source.htm">MemoryTracer.h</a>&gt;</code></p>

<p><a href="class_memory_tracer-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>AddrListNode</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>AllocationHeader</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>MemInfoNode</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>TypeNode</b></td></tr>
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a49eb660d2a7cf3b08470cdd38dec2117">DisplayAllocations</a> (bool displayNumberOfAllocsFirst=true, bool displayDetail=false)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Displays current memory allocations in the console according to criteria.  <a href="#a49eb660d2a7cf3b08470cdd38dec2117"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a307522f94127d81f2480fa17d05cf1b2"></a><!-- doxytag: member="MemoryTracer::DisplayStatTable" ref="a307522f94127d81f2480fa17d05cf1b2" args="()" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a307522f94127d81f2480fa17d05cf1b2">DisplayStatTable</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Displays table with allocated object types, the number of times each type appears (i.e., # of blocks), and the percentage of total memory each collection of type &lt;T&gt; objects takes up. Objects of unknown types are grouped by size and are indicated like so: Unknown type (size: 16 bytes). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">long long&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#abf6b69a4d982e8a09ed6349c1c32f81b">GetCurrentBlocks</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieves the number of blocks allocated at present.  <a href="#abf6b69a4d982e8a09ed6349c1c32f81b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#ac46f0a3864d0302bbc2277241a94fa04">GetCurrentMemory</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieves the current allocated memory.  <a href="#ac46f0a3864d0302bbc2277241a94fa04"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">long long&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a05ee406831ff5a1ac508f3c46d5c4dec">GetPeakBlocks</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieves the peak number of allocated blocks.  <a href="#a05ee406831ff5a1ac508f3c46d5c4dec"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#aa431f8311645aa72d5cb92e7adeea940">GetPeakMemory</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Retrieves the peak allocated memory.  <a href="#aa431f8311645aa72d5cb92e7adeea940"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a83b6c31a67c8fd59f0e2b265110e9d1c"></a><!-- doxytag: member="MemoryTracer::HeapCheck" ref="a83b6c31a67c8fd59f0e2b265110e9d1c" args="()" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a83b6c31a67c8fd59f0e2b265110e9d1c">HeapCheck</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Calls Windows-specific function to check the state of the heap and display a message in the console indicating said state. <br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static <a class="el" href="class_memory_tracer.htm">MemoryTracer</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#ac4f95b8c70487181300868c834ba085b">Get</a> ()</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Singleton access.  <a href="#ac4f95b8c70487181300868c834ba085b"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#af0f69cc13125187db8be8390973c329e">showAllAllocs</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a8f9798c5f8e6320238264840f3f5140d">showAllDeallocs</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a81579971d4832953c7ab219d4c4d49cb">dumpLeaksToFile</a></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a205ed048fdf5259c2e8e0cb60ee8f719">operator new</a> (size_t size)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Non-array operator new. Exception version.  <a href="#a205ed048fdf5259c2e8e0cb60ee8f719"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a74e446b8213b369d9656b438bf72b9cf">operator new</a> (size_t size, const std::nothrow_t &amp;)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Non-array operator new.  <a href="#a74e446b8213b369d9656b438bf72b9cf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a3d97a7e2a0208075b4b37328c96ed390">operator delete</a> (void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Non-array operator delete. Exception version.  <a href="#a3d97a7e2a0208075b4b37328c96ed390"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a07b05267121d2a9c56ab9b5c521947c3">operator delete</a> (void *ptr, const std::nothrow_t &amp;)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Non-array operator delete.  <a href="#a07b05267121d2a9c56ab9b5c521947c3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a63ce4f64887b9307317aee5baae6b18f">operator new[]</a> (size_t size)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Array operator new. Exception version.  <a href="#a63ce4f64887b9307317aee5baae6b18f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a96bc86aa365757c01bf22860197314e2">operator new[]</a> (size_t size, const std::nothrow_t &amp;)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Array operator new.  <a href="#a96bc86aa365757c01bf22860197314e2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a1d8b2d6f17242ae0d182b0f7a98ba54f">operator delete[]</a> (void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Array operator delete. Exception version.  <a href="#a1d8b2d6f17242ae0d182b0f7a98ba54f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a34441ed8ceeced16308f8e2b8dc99dc9">operator delete[]</a> (void *ptr, const std::nothrow_t &amp;)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Array operator delete.  <a href="#a34441ed8ceeced16308f8e2b8dc99dc9"></a><br/></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">T *&nbsp;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="class_memory_tracer.htm#a76f7538c4ebcca840c58f20865faf745">operator*</a> (const <a class="el" href="class_source_packet.htm">SourcePacket</a> &amp;packet, T *p)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tags allocations with filenames, lines, and types.  <a href="#a76f7538c4ebcca840c58f20865faf745"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Internal implementation of the MemoryAnalyzer tool. </p>
<p>This class intercepts and handles all allocations and deallocations. It can display info such as peak memory, number of allocations, and address lists for allocations, to name a few pieces of information it stores. It is implemented as a singleton, has very few dependencies (all of which are standard), and is portable. </p>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a49eb660d2a7cf3b08470cdd38dec2117"></a><!-- doxytag: member="MemoryTracer::DisplayAllocations" ref="a49eb660d2a7cf3b08470cdd38dec2117" args="(bool displayNumberOfAllocsFirst=true, bool displayDetail=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void MemoryTracer::DisplayAllocations </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>displayNumberOfAllocsFirst</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>displayDetail</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Displays current memory allocations in the console according to criteria. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>displayNumberOfAllocsFirst</em>&nbsp;</td><td>Set to true to display the list according to the number of allocations of a certain size (i.e., 10 allocs of size 2); otherwise, the list will be displayed according to the size of the allocations, followed by the number of allocations of that size (i.e., Size: 2, 10 allocs). (default: true) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>displayDetail</em>&nbsp;</td><td>Set to true to display extra detail about every allocation (address, file, line). Warning: Depending on program size/number of allocations, this may create a lot of messages. (default: false) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac4f95b8c70487181300868c834ba085b"></a><!-- doxytag: member="MemoryTracer::Get" ref="ac4f95b8c70487181300868c834ba085b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="class_memory_tracer.htm">MemoryTracer</a> &amp; MemoryTracer::Get </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Singleton access. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Reference to singleton object </dd></dl>

</div>
</div>
<a class="anchor" id="abf6b69a4d982e8a09ed6349c1c32f81b"></a><!-- doxytag: member="MemoryTracer::GetCurrentBlocks" ref="abf6b69a4d982e8a09ed6349c1c32f81b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long long MemoryTracer::GetCurrentBlocks </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Retrieves the number of blocks allocated at present. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Number of allocated blocks </dd></dl>

</div>
</div>
<a class="anchor" id="ac46f0a3864d0302bbc2277241a94fa04"></a><!-- doxytag: member="MemoryTracer::GetCurrentMemory" ref="ac46f0a3864d0302bbc2277241a94fa04" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t MemoryTracer::GetCurrentMemory </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Retrieves the current allocated memory. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Currently allocated memory in bytes </dd></dl>

</div>
</div>
<a class="anchor" id="a05ee406831ff5a1ac508f3c46d5c4dec"></a><!-- doxytag: member="MemoryTracer::GetPeakBlocks" ref="a05ee406831ff5a1ac508f3c46d5c4dec" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">long long MemoryTracer::GetPeakBlocks </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Retrieves the peak number of allocated blocks. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Largest number of blocks allocated at any time during program execution </dd></dl>

</div>
</div>
<a class="anchor" id="aa431f8311645aa72d5cb92e7adeea940"></a><!-- doxytag: member="MemoryTracer::GetPeakMemory" ref="aa431f8311645aa72d5cb92e7adeea940" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t MemoryTracer::GetPeakMemory </td>
          <td>(</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Retrieves the peak allocated memory. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Largest amount of memory allocated at any time during program execution in bytes </dd></dl>

</div>
</div>
<hr/><h2>Friends And Related Function Documentation</h2>
<a class="anchor" id="a3d97a7e2a0208075b4b37328c96ed390"></a><!-- doxytag: member="MemoryTracer::operator delete" ref="a3d97a7e2a0208075b4b37328c96ed390" args="(void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void operator delete </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Non-array operator delete. Exception version. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>Pointer to object to be deleted </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a07b05267121d2a9c56ab9b5c521947c3"></a><!-- doxytag: member="MemoryTracer::operator delete" ref="a07b05267121d2a9c56ab9b5c521947c3" args="(void *ptr, const std::nothrow_t &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void operator delete </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::nothrow_t &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Non-array operator delete. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>Pointer to object to be deleted </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a34441ed8ceeced16308f8e2b8dc99dc9"></a><!-- doxytag: member="MemoryTracer::operator delete[]" ref="a34441ed8ceeced16308f8e2b8dc99dc9" args="(void *ptr, const std::nothrow_t &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void operator delete[] </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::nothrow_t &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Array operator delete. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>Pointer to object to be deleted </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1d8b2d6f17242ae0d182b0f7a98ba54f"></a><!-- doxytag: member="MemoryTracer::operator delete[]" ref="a1d8b2d6f17242ae0d182b0f7a98ba54f" args="(void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void operator delete[] </td>
          <td>(</td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Array operator delete. Exception version. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>Pointer to object to be deleted </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a74e446b8213b369d9656b438bf72b9cf"></a><!-- doxytag: member="MemoryTracer::operator new" ref="a74e446b8213b369d9656b438bf72b9cf" args="(size_t size, const std::nothrow_t &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* operator new </td>
          <td>(</td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::nothrow_t &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Non-array operator new. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>Allocation size </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Void pointer to newly allocated memory </dd></dl>

</div>
</div>
<a class="anchor" id="a205ed048fdf5259c2e8e0cb60ee8f719"></a><!-- doxytag: member="MemoryTracer::operator new" ref="a205ed048fdf5259c2e8e0cb60ee8f719" args="(size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* operator new </td>
          <td>(</td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>size</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Non-array operator new. Exception version. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>Allocation size </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Void pointer to newly allocated memory </dd></dl>

</div>
</div>
<a class="anchor" id="a96bc86aa365757c01bf22860197314e2"></a><!-- doxytag: member="MemoryTracer::operator new[]" ref="a96bc86aa365757c01bf22860197314e2" args="(size_t size, const std::nothrow_t &amp;)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* operator new[] </td>
          <td>(</td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::nothrow_t &amp;&nbsp;</td>
          <td class="paramname"></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Array operator new. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>Allocation size </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Void pointer to newly allocated memory </dd></dl>

</div>
</div>
<a class="anchor" id="a63ce4f64887b9307317aee5baae6b18f"></a><!-- doxytag: member="MemoryTracer::operator new[]" ref="a63ce4f64887b9307317aee5baae6b18f" args="(size_t size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* operator new[] </td>
          <td>(</td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>size</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Array operator new. Exception version. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>size</em>&nbsp;</td><td>Allocation size </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Void pointer to newly allocated memory </dd></dl>

</div>
</div>
<a class="anchor" id="a76f7538c4ebcca840c58f20865faf745"></a><!-- doxytag: member="MemoryTracer::operator*" ref="a76f7538c4ebcca840c58f20865faf745" args="(const SourcePacket &amp;packet, T *p)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T* operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="class_source_packet.htm">SourcePacket</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>packet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&nbsp;</td>
          <td class="paramname"> <em>p</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [friend]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Tags allocations with filenames, lines, and types. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>packet</em>&nbsp;</td><td>Container object containing filename and line. This parameter is automatically filled in via a macro. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>p</em>&nbsp;</td><td>Newly created object </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Newly created object </dd></dl>

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a81579971d4832953c7ab219d4c4d49cb"></a><!-- doxytag: member="MemoryTracer::dumpLeaksToFile" ref="a81579971d4832953c7ab219d4c4d49cb" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_memory_tracer.htm#a81579971d4832953c7ab219d4c4d49cb">MemoryTracer::dumpLeaksToFile</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set to true to save all memory leaks and related information in a generated file, memleaks.log (default: false). </p>

</div>
</div>
<a class="anchor" id="af0f69cc13125187db8be8390973c329e"></a><!-- doxytag: member="MemoryTracer::showAllAllocs" ref="af0f69cc13125187db8be8390973c329e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_memory_tracer.htm#af0f69cc13125187db8be8390973c329e">MemoryTracer::showAllAllocs</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set to true to display information about every allocation in the console (default: false). Warning: Depending on program size/number of allocations, this may create a lot of messages. </p>

</div>
</div>
<a class="anchor" id="a8f9798c5f8e6320238264840f3f5140d"></a><!-- doxytag: member="MemoryTracer::showAllDeallocs" ref="a8f9798c5f8e6320238264840f3f5140d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="class_memory_tracer.htm#a8f9798c5f8e6320238264840f3f5140d">MemoryTracer::showAllDeallocs</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Set to true to display information about every deallocation in the console (default: false). Warning: Depending on program size/number of allocations, this may create a lot of messages. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="_memory_tracer_8h_source.htm">MemoryTracer.h</a></li>
<li>MemoryTracer.cpp</li>
</ul>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Wed Dec 1 2010 02:00:11 for MemoryAnalyzer by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
