<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>MemoryAnalyzer: MemoryTracer.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<h1>MemoryTracer.h</h1>  </div>
</div>
<div class="contents">
<a href="_memory_tracer_8h.htm">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00005"></a>00005 <span class="preprocessor">#ifndef MEMORYTRACER_H</span>
<a name="l00006"></a>00006 <span class="preprocessor"></span><span class="preprocessor">#define MEMORYTRACER_H</span>
<a name="l00007"></a>00007 <span class="preprocessor"></span>
<a name="l00008"></a>00008 
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;assert.h&gt;</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;fstream&gt;</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;typeinfo&gt;</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 
<a name="l00018"></a><a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">00018</a> <span class="keyword">enum</span> <a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a>
<a name="l00019"></a>00019 {
<a name="l00020"></a><a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9da94e85418a4b3a8ee7e7312c48232eb62">00020</a>         ALLOC_NEW,                      
<a name="l00021"></a><a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9da5539728868ff142a38119a3590a086de">00021</a>         <a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9da5539728868ff142a38119a3590a086de">ALLOC_NEW_ARRAY</a>         
<a name="l00022"></a>00022 };
<a name="l00023"></a>00023 
<a name="l00027"></a><a class="code" href="class_source_packet.htm">00027</a> <span class="keyword">class </span><a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>
<a name="l00028"></a>00028 {
<a name="l00029"></a>00029 <span class="keyword">private</span>:
<a name="l00030"></a>00030 
<a name="l00031"></a>00031         <a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>(<span class="keyword">const</span> <a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>&amp;);
<a name="l00032"></a>00032         <a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>&amp;);
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">public</span>:
<a name="l00035"></a>00035 
<a name="l00039"></a><a class="code" href="class_source_packet.htm#a65b7d1289e5a92346814d8523c28ee47">00039</a>         <a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="class_source_packet.htm#a0fd26fadc126cdaa667743b131c4efd8" title="Source file in which the allocation was made.">file</a>, <span class="keywordtype">int</span> <a class="code" href="class_source_packet.htm#a1104a514d01c49d75f946dafdc10d33c" title="Line number of the source file in which the allocation was made.">line</a>) : file(file), line(line)
<a name="l00040"></a>00040         {}
<a name="l00041"></a>00041         ~<a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>()
<a name="l00042"></a>00042         {}
<a name="l00043"></a>00043 
<a name="l00045"></a><a class="code" href="class_source_packet.htm#a0fd26fadc126cdaa667743b131c4efd8">00045</a>         <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="class_source_packet.htm#a0fd26fadc126cdaa667743b131c4efd8" title="Source file in which the allocation was made.">file</a>;
<a name="l00047"></a><a class="code" href="class_source_packet.htm#a1104a514d01c49d75f946dafdc10d33c">00047</a>         <span class="keywordtype">int</span> <a class="code" href="class_source_packet.htm#a1104a514d01c49d75f946dafdc10d33c" title="Line number of the source file in which the allocation was made.">line</a>;
<a name="l00048"></a>00048 };
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00052"></a>00052 T* <a class="code" href="_memory_tracer_8h.htm#ac8dce362e683f5cdef92a61ba7ab263e" title="Tags allocations with filenames, lines, and types.">operator*</a>(<span class="keyword">const</span> <a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>&amp; packet, T* p);
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 
<a name="l00062"></a><a class="code" href="class_memory_tracer.htm">00062</a> <span class="keyword">class </span><a class="code" href="class_memory_tracer.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryTracer</a>
<a name="l00063"></a>00063 {
<a name="l00064"></a>00064 <span class="keyword">private</span>:
<a name="l00065"></a>00065 
<a name="l00069"></a>00069         <span class="keyword">struct </span>AllocationHeader
<a name="l00070"></a>00070         {
<a name="l00072"></a>00072                 <span class="keywordtype">size_t</span> rawSize;
<a name="l00073"></a>00073                 <a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type;
<a name="l00074"></a>00074         };
<a name="l00075"></a>00075 
<a name="l00079"></a>00079         <span class="keyword">struct </span>AddrListNode
<a name="l00080"></a>00080         {
<a name="l00082"></a>00082                 <span class="keywordtype">void</span> *address;
<a name="l00084"></a>00084                 <span class="keyword">const</span> <span class="keywordtype">char</span> *type;
<a name="l00086"></a>00086                 <span class="keyword">const</span> <span class="keywordtype">char</span> *file;
<a name="l00088"></a>00088                 <span class="keywordtype">int</span> line;
<a name="l00089"></a>00089                 AddrListNode *next;
<a name="l00090"></a>00090         };
<a name="l00091"></a>00091 
<a name="l00095"></a>00095         <span class="keyword">struct </span>MemInfoNode
<a name="l00096"></a>00096         {
<a name="l00098"></a>00098                 <span class="keywordtype">size_t</span> size;
<a name="l00100"></a>00100                 <span class="keywordtype">int</span> numberOfAllocations;
<a name="l00102"></a>00102                 AddrListNode *addresses;
<a name="l00103"></a>00103                 MemInfoNode *next;
<a name="l00104"></a>00104         };
<a name="l00105"></a>00105 
<a name="l00110"></a>00110         <span class="keyword">struct </span>TypeNode
<a name="l00111"></a>00111         {
<a name="l00112"></a>00112                 <span class="keyword">const</span> <span class="keywordtype">char</span> *type;
<a name="l00113"></a>00113                 <span class="keywordtype">long</span> blocks;
<a name="l00114"></a>00114                 <span class="keywordtype">size_t</span> memSize;
<a name="l00115"></a>00115                 TypeNode *next;
<a name="l00116"></a>00116         };
<a name="l00117"></a>00117 
<a name="l00119"></a>00119         MemInfoNode *head_new;
<a name="l00121"></a>00121         MemInfoNode *head_new_array;
<a name="l00123"></a>00123         TypeNode *head_types;
<a name="l00126"></a>00126         AddrListNode *mostRecentAllocAddrNode;
<a name="l00127"></a>00127         
<a name="l00128"></a>00128         <span class="keywordtype">size_t</span> currentMemory;
<a name="l00129"></a>00129         <span class="keywordtype">size_t</span> peakMemory;
<a name="l00130"></a>00130         <span class="keywordtype">long</span> <span class="keywordtype">long</span> currentBlocks;
<a name="l00131"></a>00131         <span class="keywordtype">long</span> <span class="keywordtype">long</span> peakBlocks;
<a name="l00132"></a>00132         <span class="keyword">const</span> <span class="keywordtype">char</span> *unknown;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134         std::ofstream dumpFile;
<a name="l00135"></a>00135 
<a name="l00136"></a>00136         <a class="code" href="class_memory_tracer.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryTracer</a>();
<a name="l00137"></a>00137         ~<a class="code" href="class_memory_tracer.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryTracer</a>();
<a name="l00138"></a>00138         <a class="code" href="class_memory_tracer.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryTracer</a>(<span class="keyword">const</span> <a class="code" href="class_memory_tracer.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryTracer</a>&amp;);
<a name="l00139"></a>00139         <a class="code" href="class_memory_tracer.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryTracer</a>&amp; operator=(<span class="keyword">const</span> <a class="code" href="class_memory_tracer.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryTracer</a>&amp;);
<a name="l00140"></a>00140 
<a name="l00148"></a>00148         <span class="keywordtype">void</span> AddAllocationToList(<span class="keywordtype">size_t</span> size, <a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type, <span class="keywordtype">void</span> *ptr);
<a name="l00149"></a>00149 
<a name="l00158"></a>00158         <span class="keywordtype">void</span> AddAllocationDetails(<span class="keywordtype">void</span> *ptr, <span class="keyword">const</span> <span class="keywordtype">char</span> *file, <span class="keywordtype">int</span> line, <span class="keyword">const</span> <span class="keywordtype">char</span> *type, <span class="keywordtype">size_t</span> objectSize);
<a name="l00159"></a>00159 
<a name="l00164"></a>00164         <span class="keywordtype">void</span> AddToTypeList(<span class="keyword">const</span> <span class="keywordtype">char</span> *type, <span class="keywordtype">size_t</span> size);
<a name="l00165"></a>00165 
<a name="l00174"></a>00174         <span class="keywordtype">void</span>* Allocate(<span class="keywordtype">size_t</span> size, <a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type, <span class="keywordtype">bool</span> throwEx = <span class="keyword">false</span>);
<a name="l00175"></a>00175 
<a name="l00181"></a>00181         <span class="keywordtype">void</span> Deallocate(<span class="keywordtype">void</span> *ptr, <a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type, <span class="keywordtype">bool</span> throwEx = <span class="keyword">false</span>);
<a name="l00182"></a>00182 
<a name="l00187"></a>00187         <span class="keyword">const</span> <span class="keywordtype">char</span>* GetAllocTypeAsString(<a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type);
<a name="l00188"></a>00188 
<a name="l00193"></a>00193         MemInfoNode* GetListHead(<a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type);
<a name="l00194"></a>00194 
<a name="l00199"></a>00199         <span class="keywordtype">void</span> RemoveAllocationFromList(<span class="keywordtype">void</span> *ptr, <a class="code" href="_memory_tracer_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> type);
<a name="l00200"></a>00200 
<a name="l00205"></a>00205         <span class="keywordtype">void</span> RemoveFromTypeList(<span class="keyword">const</span> <span class="keywordtype">char</span> *type, <span class="keywordtype">size_t</span> size);
<a name="l00206"></a>00206 
<a name="l00212"></a>00212         AddrListNode* RetrieveAddrNode(<span class="keywordtype">void</span> *ptr, <span class="keywordtype">size_t</span> objectSize = -1);
<a name="l00213"></a>00213 
<a name="l00218"></a>00218         <span class="keywordtype">size_t</span> RetrieveAddrSize(<span class="keywordtype">void</span> *ptr);
<a name="l00219"></a>00219         
<a name="l00220"></a>00220 <span class="keyword">public</span>:
<a name="l00221"></a>00221 
<a name="l00225"></a><a class="code" href="class_memory_tracer.htm#af0f69cc13125187db8be8390973c329e">00225</a>         <span class="keywordtype">bool</span> <a class="code" href="class_memory_tracer.htm#af0f69cc13125187db8be8390973c329e">showAllAllocs</a>;
<a name="l00229"></a><a class="code" href="class_memory_tracer.htm#a8f9798c5f8e6320238264840f3f5140d">00229</a>         <span class="keywordtype">bool</span> <a class="code" href="class_memory_tracer.htm#a8f9798c5f8e6320238264840f3f5140d">showAllDeallocs</a>;
<a name="l00232"></a><a class="code" href="class_memory_tracer.htm#a81579971d4832953c7ab219d4c4d49cb">00232</a>         <span class="keywordtype">bool</span> <a class="code" href="class_memory_tracer.htm#a81579971d4832953c7ab219d4c4d49cb">dumpLeaksToFile</a>;
<a name="l00233"></a>00233         
<a name="l00242"></a>00242         <span class="keywordtype">void</span> <a class="code" href="class_memory_tracer.htm#a49eb660d2a7cf3b08470cdd38dec2117" title="Displays current memory allocations in the console according to criteria.">DisplayAllocations</a>(<span class="keywordtype">bool</span> displayNumberOfAllocsFirst = <span class="keyword">true</span>, <span class="keywordtype">bool</span> displayDetail = <span class="keyword">false</span>);
<a name="l00243"></a>00243 
<a name="l00248"></a>00248         <span class="keywordtype">void</span> <a class="code" href="class_memory_tracer.htm#a307522f94127d81f2480fa17d05cf1b2" title="Displays table with allocated object types, the number of times each type appears (i...">DisplayStatTable</a>();
<a name="l00249"></a>00249 
<a name="l00253"></a>00253         <span class="keyword">static</span> <a class="code" href="class_memory_tracer.htm" title="Internal implementation of the MemoryAnalyzer tool.">MemoryTracer</a>&amp; <a class="code" href="class_memory_tracer.htm#ac4f95b8c70487181300868c834ba085b" title="Singleton access.">Get</a>();
<a name="l00254"></a>00254 
<a name="l00258"></a>00258         <span class="keywordtype">long</span> <span class="keywordtype">long</span> <a class="code" href="class_memory_tracer.htm#abf6b69a4d982e8a09ed6349c1c32f81b" title="Retrieves the number of blocks allocated at present.">GetCurrentBlocks</a>();
<a name="l00259"></a>00259 
<a name="l00263"></a>00263         <span class="keywordtype">size_t</span> <a class="code" href="class_memory_tracer.htm#ac46f0a3864d0302bbc2277241a94fa04" title="Retrieves the current allocated memory.">GetCurrentMemory</a>();
<a name="l00264"></a>00264 
<a name="l00268"></a>00268         <span class="keywordtype">long</span> <span class="keywordtype">long</span> <a class="code" href="class_memory_tracer.htm#a05ee406831ff5a1ac508f3c46d5c4dec" title="Retrieves the peak number of allocated blocks.">GetPeakBlocks</a>();
<a name="l00269"></a>00269 
<a name="l00273"></a>00273         <span class="keywordtype">size_t</span> <a class="code" href="class_memory_tracer.htm#aa431f8311645aa72d5cb92e7adeea940" title="Retrieves the peak allocated memory.">GetPeakMemory</a>(); 
<a name="l00274"></a>00274 
<a name="l00275"></a>00275 <span class="preprocessor">#ifdef _WIN32</span>
<a name="l00276"></a>00276 <span class="preprocessor"></span>
<a name="l00279"></a>00279         <span class="keywordtype">void</span> <a class="code" href="class_memory_tracer.htm#a83b6c31a67c8fd59f0e2b265110e9d1c" title="Calls Windows-specific function to check the state of the heap and display a message in the console i...">HeapCheck</a>();
<a name="l00280"></a>00280 <span class="preprocessor">#endif</span>
<a name="l00281"></a>00281 <span class="preprocessor"></span>
<a name="l00282"></a>00282         <span class="comment">// These declarations make the new and delete operators friends to provide access to allocation and deallocation</span>
<a name="l00283"></a>00283         <span class="comment">// routines (they are private to prevent users from arbitrarily calling them).</span>
<a name="l00284"></a>00284         
<a name="l00289"></a>00289         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_tracer.htm#a205ed048fdf5259c2e8e0cb60ee8f719" title="Non-array operator new. Exception version.">operator new</a>(<span class="keywordtype">size_t</span> size);
<a name="l00290"></a>00290         
<a name="l00295"></a>00295         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_tracer.htm#a205ed048fdf5259c2e8e0cb60ee8f719" title="Non-array operator new. Exception version.">operator new</a>(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00296"></a>00296         
<a name="l00300"></a>00300         <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="class_memory_tracer.htm#a3d97a7e2a0208075b4b37328c96ed390" title="Non-array operator delete. Exception version.">operator delete</a>(<span class="keywordtype">void</span> *ptr);
<a name="l00301"></a>00301         
<a name="l00305"></a>00305         <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="class_memory_tracer.htm#a3d97a7e2a0208075b4b37328c96ed390" title="Non-array operator delete. Exception version.">operator delete</a>(<span class="keywordtype">void</span> *ptr, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 
<a name="l00312"></a>00312         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_tracer.htm#a63ce4f64887b9307317aee5baae6b18f" title="Array operator new. Exception version.">operator new[]</a>(<span class="keywordtype">size_t</span> size);
<a name="l00313"></a>00313         
<a name="l00318"></a>00318         <span class="keyword">friend</span> <span class="keywordtype">void</span>* <a class="code" href="class_memory_tracer.htm#a63ce4f64887b9307317aee5baae6b18f" title="Array operator new. Exception version.">operator new[]</a>(<span class="keywordtype">size_t</span> size, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00319"></a>00319         
<a name="l00323"></a>00323         <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="class_memory_tracer.htm#a1d8b2d6f17242ae0d182b0f7a98ba54f" title="Array operator delete. Exception version.">operator delete[]</a>(<span class="keywordtype">void</span> *ptr);
<a name="l00324"></a>00324         
<a name="l00328"></a>00328         <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="class_memory_tracer.htm#a1d8b2d6f17242ae0d182b0f7a98ba54f" title="Array operator delete. Exception version.">operator delete[]</a>(<span class="keywordtype">void</span> *ptr, <span class="keyword">const</span> std::nothrow_t&amp;);
<a name="l00329"></a>00329         
<a name="l00330"></a>00330         <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00331"></a>00331         <span class="keyword">friend</span> T* <a class="code" href="class_memory_tracer.htm#a76f7538c4ebcca840c58f20865faf745" title="Tags allocations with filenames, lines, and types.">operator*</a>(<span class="keyword">const</span> <a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>&amp; packet, T* p);
<a name="l00332"></a>00332 };
<a name="l00333"></a>00333 
<a name="l00339"></a>00339 <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;
<a name="l00340"></a><a class="code" href="_memory_tracer_8h.htm#ac8dce362e683f5cdef92a61ba7ab263e">00340</a> T* <a class="code" href="_memory_tracer_8h.htm#ac8dce362e683f5cdef92a61ba7ab263e" title="Tags allocations with filenames, lines, and types.">operator*</a>(<span class="keyword">const</span> <a class="code" href="class_source_packet.htm" title="Temporary container class for macro-acquired file and line information.">SourcePacket</a>&amp; packet, T* p)
<a name="l00341"></a>00341 {
<a name="l00342"></a>00342         <span class="keywordflow">if</span>(p)
<a name="l00343"></a>00343         {
<a name="l00344"></a>00344                 <span class="keyword">const</span> <span class="keywordtype">char</span> *type = <span class="keyword">nullptr</span>;
<a name="l00345"></a>00345                 <span class="keywordflow">try</span>
<a name="l00346"></a>00346                 {
<a name="l00347"></a>00347                          type = <span class="keyword">typeid</span>(*p).name();
<a name="l00348"></a>00348                 }
<a name="l00349"></a>00349                 <span class="comment">// bad RTTI</span>
<a name="l00350"></a>00350                 <span class="keywordflow">catch</span>(std::bad_typeid&amp; e)
<a name="l00351"></a>00351                 {
<a name="l00352"></a>00352                         cout &lt;&lt; e.what() &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00353"></a>00353                         <span class="keywordflow">return</span> p;
<a name="l00354"></a>00354                 }
<a name="l00355"></a>00355 
<a name="l00356"></a>00356                 <a class="code" href="class_memory_tracer.htm#ac4f95b8c70487181300868c834ba085b" title="Singleton access.">MemoryTracer::Get</a>().AddAllocationDetails(p, packet.<a class="code" href="class_source_packet.htm#a0fd26fadc126cdaa667743b131c4efd8" title="Source file in which the allocation was made.">file</a>, packet.<a class="code" href="class_source_packet.htm#a1104a514d01c49d75f946dafdc10d33c" title="Line number of the source file in which the allocation was made.">line</a>, type, <span class="keyword">sizeof</span>(*p));
<a name="l00357"></a>00357                 
<a name="l00358"></a>00358                 <span class="keywordflow">if</span>(<a class="code" href="class_memory_tracer.htm#ac4f95b8c70487181300868c834ba085b" title="Singleton access.">MemoryTracer::Get</a>().showAllAllocs)
<a name="l00359"></a>00359                 {
<a name="l00360"></a>00360                         cout &lt;&lt; <span class="stringliteral">&quot;Allocation Information Trace &gt;\n\tObject Type: &quot;</span> &lt;&lt; type &lt;&lt; <span class="stringliteral">&quot;\n\tFile: &quot;</span> &lt;&lt; packet.<a class="code" href="class_source_packet.htm#a0fd26fadc126cdaa667743b131c4efd8" title="Source file in which the allocation was made.">file</a> 
<a name="l00361"></a>00361                                 &lt;&lt; <span class="stringliteral">&quot;\n\tLine: &quot;</span> &lt;&lt; packet.<a class="code" href="class_source_packet.htm#a1104a514d01c49d75f946dafdc10d33c" title="Line number of the source file in which the allocation was made.">line</a> &lt;&lt; <span class="stringliteral">&quot;\n\n&quot;</span>;
<a name="l00362"></a>00362                 }
<a name="l00363"></a>00363 
<a name="l00364"></a>00364                 <span class="keywordtype">size_t</span> objectSize = <a class="code" href="class_memory_tracer.htm#ac4f95b8c70487181300868c834ba085b" title="Singleton access.">MemoryTracer::Get</a>().RetrieveAddrSize(p);
<a name="l00365"></a>00365                 assert(objectSize != -1);
<a name="l00366"></a>00366                 <span class="comment">// we need to send the size in case the ptr is pointing to an array, in which case sizeof(*p) would be wrong</span>
<a name="l00367"></a>00367                 <a class="code" href="class_memory_tracer.htm#ac4f95b8c70487181300868c834ba085b" title="Singleton access.">MemoryTracer::Get</a>().AddToTypeList(type, objectSize);
<a name="l00368"></a>00368         }
<a name="l00369"></a>00369         <span class="keywordflow">return</span> p;
<a name="l00370"></a>00370 }
<a name="l00371"></a>00371 
<a name="l00372"></a>00372 <span class="preprocessor">#endif</span>
</pre></div></div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Wed Dec 1 2010 02:00:11 for MemoryAnalyzer by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
