<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>MemoryAnalyzer: Main Page</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li class="current"><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="headertitle">
<h1>MemoryAnalyzer Documentation</h1>  </div>
</div>
<div class="contents">
<h2><a class="anchor" id="desc"></a>
Description</h2>
<p>MemoryAnalyzer is a very simple, portable memory information tool for C++ projects. It was written for educational purposes, for determining the correct memory scheme to use when developing video games (for example, to help the user determine whether using a pool would be worthwhile), and for detecting leaks. It was written with single-threaded applications in mind and is not thread-safe (although you are free to extend it for multi-threaded apps) and has very few dependencies, all of which are part of the standard library. MemoryAnalyzer was also designed to be simple to understand and use (both installation and usage).</p>
<p>Note that since it was written with portability in mind, it does not have all the features of memory tools written specifically for your platform. It is also not intended to replace the more sophisticated tools out there (such as Valgrind), but to serve as an easy-to-use, portable tool which you can use to check for leaks and get an overview of your program's memory-related behavior.</p>
<h2><a class="anchor" id="inst"></a>
Installation</h2>
<p>Installation is very simple--just copy the header and source files to your project directory and include "MemoryAnalyzer.h" at the very beginning of your program (before any other includes).</p>
<h2><a class="anchor" id="use"></a>
Usage</h2>
<p>The name of the singleton object is memAnalyzer and is available to you in order to change certain aspects of its behavior. Note that MemoryAnalyzer will only be in effect during debug builds. Once you switch to your Release build, memory allocation and deallocation will return to normal, with no effort on your part. Also, note that, by default, exceptions are not used (although exception versions of allocation/deallocation functions are present).</p>
<h3><a class="anchor" id="leaks"></a>
Memory Leaks</h3>
<p>If you just want to check for leaks, you don't have to do anything else--a leak report will show up in the console when your program exits. If you also want to dump leaks to a file when your program exits, set dumpLeaksToFile to true.</p>
<p>Example: memAnalyzer-&gt;dumpLeaksToFile = true;</p>
<h3><a class="anchor" id="allocInfo"></a>
Alloc/Dealloc Information</h3>
<p>Although it can create a (very) large amount of spam in the console if left on all the time, sometimes it may be useful to see allocations and deallocations as they happen. To turn on diagnostic information for allocations, set showAllAllocs to true; likewise, to turn on diagnostic information for deallocations, set showAllDeallocs to true.</p>
<p>Example: memAnalyzer-&gt;showAllAllocs = true;</p>
<p>You may wish to get a summarized list of all the current allocations; for example, you may want to see if you are making a lot of small allocations and relatively few large allocations, in order to determine if your memory scheme could be improved. To get a list of the current allocations, call DisplayAllocations(). Check the documentation for an explanation of the parameters.</p>
<p>Example: memAnalyzer-&gt;DisplayAllocations();</p>
<p>If you're working within strict memory limits, keeping an eye on how much memory you are using is important. To see how much memory you currently have allocated, call GetCurrentMemory(). To see the peak amount of memory you had allocated during your program's run, call GetPeakMemory().</p>
<p>Example: cout &lt;&lt; memAnalyzer-&gt;GetCurrentMemory();</p>
<p>If you are using operator new to get raw memory, MemoryAnalyzer will fail to compile due to how it tags allocations. You can still use MemoryAnalyzer to track memory sizes, allocations types (array/non-array), addresses, and quantities, however. Just define DISABLE_DEBUG_INFO_COLLECTION before including <a class="el" href="_memory_analyzer_8h.htm" title="Include this header file at the very beginning of your program to use MemoryAnalyzer.">MemoryAnalyzer.h</a>. This can also be used if you want to improve performance slightly in your debug builds.</p>
<p>Example: "#define DISABLE_DEBUG_INFO_COLLECTION" (minus the quotes)</p>
<h3><a class="anchor" id="table"></a>
Statistics Table</h3>
<p>While you can call DisplayAllocations to see the current number of allocations and their sizes, you may want to get further information, such as the percentage of a certain object type. To view the table, call DisplayStatTable(). Note that it only makes sense to call this function if you haven't defined DISABLE_DEBUG_INFO_COLLECTION, since type information will not be available.</p>
<p>Example: memAnalyzer-&gt;DisplayStatTable();</p>
<h3><a class="anchor" id="heap"></a>
Heap Checking</h3>
<p>Heap corruption is a very serious problem. If you are on a Windows system, you can call HeapCheck() to determine the state of the heap. Although calling the function could shuffle things around in memory and cause the problem to move somewhere else, it can often be helpful in narrowing down the problem region.</p>
<p>Example: memAnalyzer-&gt;HeapCheck(); </p>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Wed Dec 1 2010 02:00:11 for MemoryAnalyzer by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
