<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>MemoryAnalyzer: MemMngr.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
      <li><a href="globals.htm"><span>File&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<h1>MemMngr.h File Reference</h1>  </div>
</div>
<div class="contents">

<p>Internal implementation -- do not include this file directly. Please include <a class="el" href="_memory_analyzer_8h.htm" title="Include this header file at the very beginning of your program to use MemoryAnalyzer.">MemoryAnalyzer.h</a> instead.  
<a href="#_details">More...</a></p>
<code>#include &lt;assert.h&gt;</code><br/>
<code>#include &lt;exception&gt;</code><br/>
<code>#include &lt;iostream&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;stdio.h&gt;</code><br/>
<code>#include &lt;malloc.h&gt;</code><br/>

<p><a href="_mem_mngr_8h_source.htm">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="class_memory_manager.htm">MemoryManager</a></td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Internal implementation of the MemoryAnalyzer tool.  <a href="class_memory_manager.htm#_details">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>MemoryManager::AllocationHeader</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>MemoryManager::AddrListNode</b></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><b>MemoryManager::MemInfoNode</b></td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a> { <a class="el" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9da94e85418a4b3a8ee7e7312c48232eb62">ALLOC_NEW</a>, 
<a class="el" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9da5539728868ff142a38119a3590a086de">ALLOC_NEW_ARRAY</a>
 }</td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a205ed048fdf5259c2e8e0cb60ee8f719"></a><!-- doxytag: member="MemMngr.h::operator new" ref="a205ed048fdf5259c2e8e0cb60ee8f719" args="(size_t size)" -->
void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a205ed048fdf5259c2e8e0cb60ee8f719">operator new</a> (size_t size)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of new (exception form). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a74e446b8213b369d9656b438bf72b9cf"></a><!-- doxytag: member="MemMngr.h::operator new" ref="a74e446b8213b369d9656b438bf72b9cf" args="(size_t size, const std::nothrow_t &amp;)" -->
void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a74e446b8213b369d9656b438bf72b9cf">operator new</a> (size_t size, const std::nothrow_t &amp;)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of new (does not throw). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a82b4fcc5e4cfba2e146c56604a283344"></a><!-- doxytag: member="MemMngr.h::operator new" ref="a82b4fcc5e4cfba2e146c56604a283344" args="(size_t size, const char *file, int line)" -->
void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a82b4fcc5e4cfba2e146c56604a283344">operator new</a> (size_t size, const char *file, int line)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of new with extra diagnostic info (file, line #). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3d97a7e2a0208075b4b37328c96ed390"></a><!-- doxytag: member="MemMngr.h::operator delete" ref="a3d97a7e2a0208075b4b37328c96ed390" args="(void *ptr)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a3d97a7e2a0208075b4b37328c96ed390">operator delete</a> (void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of delete (exception form). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a07b05267121d2a9c56ab9b5c521947c3"></a><!-- doxytag: member="MemMngr.h::operator delete" ref="a07b05267121d2a9c56ab9b5c521947c3" args="(void *ptr, const std::nothrow_t &amp;)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a07b05267121d2a9c56ab9b5c521947c3">operator delete</a> (void *ptr, const std::nothrow_t &amp;)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of delete (does not throw). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a63ce4f64887b9307317aee5baae6b18f"></a><!-- doxytag: member="MemMngr.h::operator new[]" ref="a63ce4f64887b9307317aee5baae6b18f" args="(size_t size)" -->
void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a63ce4f64887b9307317aee5baae6b18f">operator new[]</a> (size_t size)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of array new (exception form). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a96bc86aa365757c01bf22860197314e2"></a><!-- doxytag: member="MemMngr.h::operator new[]" ref="a96bc86aa365757c01bf22860197314e2" args="(size_t size, const std::nothrow_t &amp;)" -->
void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a96bc86aa365757c01bf22860197314e2">operator new[]</a> (size_t size, const std::nothrow_t &amp;)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of array new (does not throw). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac6a058e9defc8cd61985fa21887b59c4"></a><!-- doxytag: member="MemMngr.h::operator new[]" ref="ac6a058e9defc8cd61985fa21887b59c4" args="(size_t size, const char *file, int line)" -->
void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#ac6a058e9defc8cd61985fa21887b59c4">operator new[]</a> (size_t size, const char *file, int line)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of array new with extra diagnostic info (file, line #). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1d8b2d6f17242ae0d182b0f7a98ba54f"></a><!-- doxytag: member="MemMngr.h::operator delete[]" ref="a1d8b2d6f17242ae0d182b0f7a98ba54f" args="(void *ptr)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a1d8b2d6f17242ae0d182b0f7a98ba54f">operator delete[]</a> (void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of array delete (exception form). <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a34441ed8ceeced16308f8e2b8dc99dc9"></a><!-- doxytag: member="MemMngr.h::operator delete[]" ref="a34441ed8ceeced16308f8e2b8dc99dc9" args="(void *ptr, const std::nothrow_t &amp;)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="_mem_mngr_8h.htm#a34441ed8ceeced16308f8e2b8dc99dc9">operator delete[]</a> (void *ptr, const std::nothrow_t &amp;)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Overloaded form of array delete (does not throw). <br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Internal implementation -- do not include this file directly. Please include <a class="el" href="_memory_analyzer_8h.htm" title="Include this header file at the very beginning of your program to use MemoryAnalyzer.">MemoryAnalyzer.h</a> instead. </p>
<hr/><h2>Enumeration Type Documentation</h2>
<a class="anchor" id="a564fc3bb689bd0ed5cdcde9580ad9b9d"></a><!-- doxytag: member="MemMngr.h::AllocationType" ref="a564fc3bb689bd0ed5cdcde9580ad9b9d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="_mem_mngr_8h.htm#a564fc3bb689bd0ed5cdcde9580ad9b9d">AllocationType</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>This is used to differentiate between memory allocated through either new or new[] </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a564fc3bb689bd0ed5cdcde9580ad9b9da94e85418a4b3a8ee7e7312c48232eb62"></a><!-- doxytag: member="ALLOC_NEW" ref="a564fc3bb689bd0ed5cdcde9580ad9b9da94e85418a4b3a8ee7e7312c48232eb62" args="" -->ALLOC_NEW</em>&nbsp;</td><td>
<p>Normal memory allocation </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a564fc3bb689bd0ed5cdcde9580ad9b9da5539728868ff142a38119a3590a086de"></a><!-- doxytag: member="ALLOC_NEW_ARRAY" ref="a564fc3bb689bd0ed5cdcde9580ad9b9da5539728868ff142a38119a3590a086de" args="" -->ALLOC_NEW_ARRAY</em>&nbsp;</td><td>
<p>Array memory allocation </p>
</td></tr>
</table>
</dd>
</dl>

</div>
</div>
</div>
<hr class="footer"/><address class="footer"><small>Generated on Sat Nov 6 2010 22:42:56 for MemoryAnalyzer by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.1 </small></address>
</body>
</html>
